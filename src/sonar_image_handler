#!/usr/bin/python2.7
"""
TODO: Description
"""
import rospy
import struct
import socket
import cv2
import numpy as np
import ros_numpy
from sensor_msgs.msg import Image, PointCloud2
from std_msgs.msg import Float64MultiArray
from cv_bridge import CvBridge
import pdb



from skimage import color
from dynamic_reconfigure.server import Server
from oculus_sonar.cfg import ImgThresholdConfig


__license__ = "MIT"
__author__ = "Aldo Teran Espinoza"
__author_email__ = "aldot@kth.se"
__status__ = "Development"


def callback(config, level):
    rospy.loginfo("""Reconfigure Request: {clh_tile_size}, {clh_clp_lmt},{cny_min_thrshld}, {cny_max_thrshld}, 
        {cny_l2g}, {mrphlgy_krnl}, {Mrphlgcl_sel}, {check}""".format(**config))
    
    # clh_tile_size = config['groups']['parameters']['clh_tile_size']
    # clh_clp_lmt = config['groups']['parameters']['clh_clp_lmt']

    # cny_min_thrshld = config['groups']['parameters']['cny_min_thrshld']
    # cny_max_thrshld = config['groups']['parameters']['cny_max_thrshld']
    # cny_l2g = config['groups']['parameters']['cny_l2g']
    
    # mrphlgy_krnl = config['groups']['parameters']['mrphlgy_krnl']
    # Mrphlgcl_sel = config['groups']['parameters']['Mrphlgcl_sel']

    print("aha aha aha  aha aha aha  aha aha aha canny params:")#, cny_min_thrshld, cny_max_thrshld, cny_l2g)

    return config



class Image_handler:
    """
    Class to handle Sonar image.
    """

    def __init__(self):
        """
        Not done yet.
        """
        # TODO: get this as a rosparam
        self.publish_edges = True

        # TODO: Which approach is better?
        self.sonar_result = {
            "image_msg" : None,
            "ping_result" : None,
            "image_array" : None
        }

        # Image processing parameters
        self.image_threshold = 100

        # Init bearing arrays
        self.low_freq_brgs = None
        self.high_freq_brgs = None
        self._init_bearings()

        self.bridge = CvBridge()

        self.processed_img_pub = rospy.Publisher("/processed_image", Image, queue_size=1)
        self.clh_img_pub = rospy.Publisher("/clh_image", Image, queue_size=1)
        self.cny_img_pub = rospy.Publisher("/cny_image", Image, queue_size=1)
        self.mrphlgy_img_pub = rospy.Publisher("/mrphlgy_image", Image, queue_size=1)

        # Init Subscribers
        rospy.Subscriber("/sonar_image", Image, self._sonar_image_callback)
        rospy.Subscriber("/simple_ping_result", Float64MultiArray, self._sonar_ping_callback)

    def _init_bearings(self):
        """
        Initialize the bearing vectors (since constant)
        to avoid redundant computations.
        """
        # Calculate for low frequency
        iterable = (-65+x*0.5078125 for x in range(256))
        bearings = np.fromiter(iterable, float)
        self.low_freq_brgs = np.expand_dims(bearings, 0)

        # Calculate for high frequency
        iterable = (-35+x*0.2734375 for x in range(256))
        bearings = np.fromiter(iterable, float)
        self.high_freq_brgs = np.expand_dims(bearings, 0)

    def _sonar_image_callback(self, image):
        # Get data, save in dictionary both message and image array
        self.sonar_result["image_msg"] = image
        self.sonar_result["image_array"] = self.bridge.imgmsg_to_cv2(image)#, "mono8")

    def _sonar_ping_callback(self, data):
        self.sonar_result["ping_result"] = data

    def process_sonar_image(self):
        """
        Build pointcloud and publish.
        """
        image = self.sonar_result["image_array"]

        # Compute range and bearing maps using the ping result
        ping_result = self.sonar_result["ping_result"].data
        resolution = ping_result[6] #it was 8
        [rows, cols] = np.shape(image)
        range_max = rows*resolution
        ranges = np.linspace(0,range_max, rows)

        # Check image frequency
        high_freq = (ping_result[0] > 1000000) # it was 2
        if high_freq:
            # bearings = np.tile(self.high_freq_brgs, (rows, 1))
            bearing_mesh, range_mesh = np.meshgrid(self.high_freq_brgs, ranges)
        else:
            # bearings = np.tile(self.low_freq_brgs, (rows, 1))
            bearing_mesh, range_mesh = np.meshgrid(self.high_freq_brgs, ranges)

        # TODO: Turn this into a gate (like the MBES)
        # Threshold image
        clh_tile_size = rospy.get_param('~clh_tile_size', 5)
        clh_clp_lmt = rospy.get_param('~clh_clp_lmt', 2.0)

        cny_min_thrshld = rospy.get_param('~cny_min_thrshld', 210)
        cny_max_thrshld = rospy.get_param('~cny_max_thrshld', 240)
        cny_l2g = rospy.get_param('~cny_l2g', True)

        mrphlgy_krnl = rospy.get_param('~mrphlgy_krnl', 5)
        Mrphlgcl_sel = rospy.get_param('~Mrphlgcl_sel', 0)

        ret, image = cv2.threshold(image, self.image_threshold, 255, cv2.THRESH_TOZERO)
        # TODO: Maybe can tune parameters better, good results with current values.
        # Detect edges with second Laplacian and processes the shit out of the image
        clahe = cv2.createCLAHE(clipLimit=clh_clp_lmt, tileGridSize=(clh_tile_size, clh_tile_size))
        clh_img = clahe.apply(image)
        cny_img = cv2.Canny(clh_img, cny_min_thrshld, cny_max_thrshld, L2gradient=cny_l2g)
        print("canny params:", cny_min_thrshld, cny_max_thrshld, cny_l2g)
        print("calahe params:", clh_tile_size, clh_clp_lmt)
        kernel = np.ones((mrphlgy_krnl, mrphlgy_krnl), np.uint8)
        mrphlgy_img = cv2.morphologyEx(cny_img, cv2.MORPH_CLOSE, kernel)
        edges = np.argmax(mrphlgy_img, axis=0)
        cols = np.arange(0,len(edges),1)
        image_out = np.zeros(image.shape, np.uint8)
        image_out[edges,cols] = 255

        # overlay edges on original image
        # edge_raw_img = color.label2rgb(image_out, image)

        # if self.publish_edges:
        # Publish processed edges as an image
        image_msg = self.bridge.cv2_to_imgmsg(clh_img, encoding="passthrough")
        self.clh_img_pub.publish(image_msg)
        image_msg = self.bridge.cv2_to_imgmsg(cny_img, encoding="passthrough")
        self.cny_img_pub.publish(image_msg)        
        image_msg = self.bridge.cv2_to_imgmsg(mrphlgy_img, encoding="passthrough")
        self.mrphlgy_img_pub.publish(image_msg)
        image_msg = self.bridge.cv2_to_imgmsg(image_out, encoding="passthrough")
        self.processed_img_pub.publish(image_msg)




    def _polar_to_cartesian(self, image):
        ping_result = self.sonar_result["ping_result"].data
        resolution = ping_result[6] # it was 4
        [rows, cols] = np.shape(image)

        # Check if image was taken in high frequency
        high_freq = (ping_result[0] > 1000000) # it was 2
        if high_freq:
            bearings = np.tile(self.high_freq_brgs, (rows, 1))
        else:
            bearings = np.tile(self.low_freq_brgs, (rows, 1))

        # Build array with ranges
        iterable = (i*resolution for i in range(rows))
        ranges = np.fromiter(iterable, float)
        ranges = np.expand_dims(ranges, 1)
        ranges = np.tile(ranges, (1, cols))

        # Convert to to cartesian
        [x, y] = cv2.polarToCart(ranges, bearings, angleInDegrees=True)
        return [x, y]


def main():
    """
    Main method for the ROS node.
    """
    rospy.init_node('image_to_pointcloud')
    rospy.loginfo("Starting sonar image to pointcloud node...")
    converter = Image_handler()
    srv = Server(ImgThresholdConfig, callback)
    
    rate = rospy.Rate(10)
    rospy.sleep(1.0)
    while not rospy.is_shutdown():
        converter.process_sonar_image()
        rate.sleep()
    # rospy.spin()


if __name__ == "__main__":
    main()

